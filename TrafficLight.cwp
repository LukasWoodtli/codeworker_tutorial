
TrafficLightControl ::=
  #ignore(C++)    // ignore C++ style comments and whitespaces
  #continue       // syntax error if BNF sequence fails
  [strategy]*     // repetiton of strategies consuming
  #empty          // end of file needs to be reached after reading strategies
  ;

strategy ::=
  #readIdentifier:"strategy"
  #continue                   // no fail allowed in end BNF sequence
  #readIdentifier:sName        // assign consumed id to local var
  /* '=>' escapes the BNF to execute a non-BNF instruction */
  => if this.strategies.findElement(sName) {
    // error! strategy already exists in parse tree!
    error("cannot define the strategy '" + sName + "' twice!");
  }
  // insert strategy to parse tree and keep a reference
  => insert this.strategies[sName].name = sName;
  => localref theStrategy = this.strategies[sName];
  '{'
  start_condition(theStrategy)  // when to trigger the strategy
  [rule(theStrategy)]+          // at least one rule to parse
  '}'
  ;

start_condition(theStrategy : node) ::=
  #continue
  #readIdentifier:"start"        // add condtion to parse tree
  condition:theStrategy.start   // start running strategy
  ';'
  ;

rule(theStrategy : node) ::=
  condition:sAntecedent   // antecedent of a rule is a condition
  #continue
  "=>"
  => pushItem theStrategy.rules;
  // to last element of list to insert new attribute
  => insert theStrategy.rules#back.condition = sAntecedent;
  => pushItem theStrategy.rules#back.actions;   // add new action
  #readIdentifier:sAction
  // call generic BNF non-terminal resolved by 'sAction'
  rule_action<sAction>(theStrategy.rules#back.actions#back)
  [
    ',' #continue // comma separates actions
    => pushItem theStrategy.rules#back.actions;
    #readIdentifier:sAction
    rule_action<sAction>(theStrategy.rules#back.actions#back)
  ]*
  ';'
  ;

// Generic BNf non-terminal instantiated on "duration" constant
rule_action<"duration">(theAction : node) ::=
  #continue
  => theAction = "duration"; // type of action
  '('
  street_segment(theAction.crossroad_entry) // entry point
  ','
  time_sequence(theAction.durations) // traffic light durations
  ')'
  ;

rule_action<"activate">(theAction : node) ::=
  #continue
  => theAction = "activate";
  '(' #readIdentifier:theAction.strategy ')'
  ;

rule_action<"desactivate">(theAction : node) ::=
  => theAction = "desactivate";
  ;

street_segment(theSegment : node) ::=
  #readIdentifier:theSegment.crossroad
  #continue "->"
  => insert theSegment.direction = "c->s";
  #readCString:theSegment.street
  |
  #readCString:theSegment.street
  #continue "->"
  => insert theSegment.direction = "s->c";
  #readIdentifier:theSegment.crossroad
  ;

time_sequence(theSequence : node) ::=
  #continue
  => pushItem theSequence;
  timeInSeconds:theSequence#back
  [
    '/' #continue
    => pushItem theSequence;
    timeInSeconds:theSequence#back
  ]+
  ;

// the keyword 'value' means that the transformation is returned
// than the consumed character sequence
timeInSeconds:value ::=
  #readInteger:iMin
  #continue
  "min"
  // arithmetic expressions are enclosed between '$'
  => timeInSeconds = $iMin * 60$;
  #readInteger:iSec
  => timeInSeconds = $timeInSeconds + iSec$;
  ;

condition ::=
  !'}' // look ahead one character if no trailling brace
  [
      #readCString
    |
      #readCChar
    |
      ~[';' | "=>"] // consume if neither ';' nor '=>0 reached
  ]*
   ;
